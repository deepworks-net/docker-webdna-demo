[!] These are utility functions for JARVIS having to do with SQL [/!]

[!] Build the 'Update' String [/!]
[Function name=J_UpdateTemplate]
	[text]_op=OUTPUT INSERTED.* [/text]
	[Hideif [isNull varName=outputClause]=T][text]_op=[outputClause] [/text][/Hideif]
	[RETURN]UPDATE tbl [/RETURN]
	[RETURN]set [/RETURN]
	[RETURN][upFields] [/RETURN]
	[RETURN][_op][/RETURN]
	[RETURN]FROM [tableVar] tbl JOIN ([/RETURN]
	[RETURN]values [updateVar][/RETURN]
	[RETURN]) t [valueMap] ON [updateCond];[/RETURN]
[/Function]

[!] Build the 'Insert' String [/!]
[Function name=J_InsertTemplate]
	[RETURN]INSERT INTO [tableVar] [/RETURN]
	[RETURN][insertFields] [/RETURN]
	[RETURN]OUTPUT INSERTED.* [/RETURN]
	[RETURN]values [insertVar];[/RETURN]
[/Function]

[!] Replace Empties With NULLS [/!]
[Function name=J_RepNULL]
	[RETURN][GREP search='NULL'&replace=NULL][INTERPRET][INTERPRET][[varName]][/INTERPRET][/INTERPRET][/GREP][/RETURN]
[/Function]

[!] Set a Global Success Message [/!]
[Function name=J_SuccessMsg]
	[RETURN][text scope=GLOBAL]j_msg=Success![/text][/RETURN]
[/Function]

[!] Interpret A Variable By It's Name [/!]
[Function name=J_IntVar]
	[text]t=[INTERPRET][[varName]][/INTERPRET][/text]
	[IF ("[isNull varName=t]"="T") | ("[t]"="[[varName]]")]
		[THEN]
			[text]t=NULL[/text]
		[/THEN]
	[/IF]
	[RETURN][t][/RETURN]
[/Function]

[!] Core function to pull apart the list and put it in a form sql understands [/!]
[Function name=J_Core_BuildValueMap]
	[text]v=[/text]
	[Listwords words=[listMap]&delimiters=|]
		[text]v=[v][Hideif [index]=1],[/Hideif][word][/text]
	[/Listwords]
	[RETURN][v][/RETURN]
[/Function]

[!] Default Value Map Function [/!]
[Function name=J_Def_BuildValueMap]
	[RETURN]([J_Core_BuildValueMap listMap=[listMap]])[/RETURN]
[/Function]

[!] Builds a Value Map for the Update String from a piped List [/!]
[Function name=J_BuildValueMap]
	[RETURN][J_Def_BuildValueMap listMap=[listMap]][/RETURN]
[/Function]

[!] Core function to pull apart the list and put it in a form sql understands [/!]
[Function name=J_Core_BuildVals]
	[text]v=[/text]
	[Listwords words=[listMap]&delimiters=|]
		[text]v=[v][Hideif [index]=1],[/Hideif]'[RAW][CleanVar varName=[/RAW][word][RAW]][/RAW]'[/text]
	[/Listwords]
	[RETURN][v][/RETURN]
[/Function]

[!] Default Build Update Values String Function [/!]
[Function name=J_Def_BuildUpVals]
	[text]v=([J_Core_BuildVals listMap=[listMap]])[/text]
	[RETURN][J_RepNULL varName=v][/RETURN]
[/Function]

[!] Builds The Basic Update String for INTERPRET based on a piped list [/!]
[Function name=J_BuildUpVals]
	[RETURN][J_Def_BuildUpVals listMap=[listMap]][/RETURN]
[/Function]

[!] Default Build Insert Values String Function [/!]
[Function name=J_Def_BuildInVals]
	[text]v=([J_Core_BuildVals listMap=[listMap]])[/text]
	[RETURN][J_RepNULL varName=v][/RETURN]
[/Function]

[!] Builds The Basic Insert String for INTERPRET based on a piped list [/!]
[Function name=J_BuildInVals]
	[RETURN][J_Def_BuildInVals listMap=[listMap]][/RETURN]
[/Function]

[!] Core function to pull apart the list and put it in a form sql understands [/!]
[Function name=J_Core_BuildUpFields]
	[text]v=[/text]
	[Listwords words=[listMap]&delimiters=|]
		[text]v=[v][Hideif [index]=1],[/Hideif][word] = t.[word][/text]
	[/Listwords]
	[RETURN][v][/RETURN]
[/Function]

[!] Default Build Update Fields String Function [/!]
[Function name=J_Def_BuildUpFields]
	[RETURN][J_Core_BuildUpFields listMap=[listMap]][/RETURN]
[/Function]

[!] Builds the Update Fields for the Update String from a piped list [/!]
[Function name=J_BuildUpFields]
	[RETURN][J_Core_BuildUpFields listMap=[listMap]][/RETURN]
[/Function]

[!] Core function to pull apart the list and put it in a form sql understands [/!]
[Function name=J_Core_BuildInFields]
	[text]v=[/text]
	[Listwords words=[listMap]&delimiters=|]
		[text]v=[v][Hideif [index]=1],[/Hideif][word][/text]
	[/Listwords]
	[RETURN][v][/RETURN]
[/Function]

[!] Default Build Insert Fields String Function [/!]
[Function name=J_Def_BuildInFields]
	[RETURN]([J_Core_BuildInFields listMap=[listMap]])[/RETURN]
[/Function]

[!] Builds the Insert Fields for the Insert String from a piped list [/!]
[Function name=J_BuildInFields]
	[RETURN]([J_Core_BuildInFields listMap=[listMap]])[/RETURN]
[/Function]

[!] Builds the Update String [/!]
[Function name=J_BuildString]
	[RETURN][J_BuildUpVals [ListWords words=[valueList]&delimiters=|][Hideif [index]=1]&[/Hideif][word]=[URL][J_IntVar varName=[J_BuildVar field=[word]]][/URL][/Listwords]][/RETURN]
[/Function]

[!] Builds the Insert String [/!]
[Function name=J_BuildInString]
	[RETURN][J_BuildUpVals [ListWords words=[valueList]&delimiters=|][Hideif [index]=1]&[/Hideif][word]=[URL][J_IntVar varName=[J_BuildVar field=[word]]][/URL][/Listwords]][/RETURN]
[/Function]

[!] Builds the Update String [/!]
[Function name=J_BuildUpString]
	[RETURN][J_BuildUpVals [ListWords words=[valueList]&delimiters=|][Hideif [index]=1]&[/Hideif][word]=[URL][J_IntVar varName=[J_BuildVar field=[word]]][/URL][/Listwords]][/RETURN]
[/Function]

[!] Builds the Variable based on things! [/!]
[Function name=J_BuildVar]
	[RETURN][field][/RETURN]
[/Function]

[!] Checks for all Empty Vars - returns F if any are NOT NULL [/!]
[Function name=J_EmptyCheck]
	[text]res=T[/text]
	[ListWords words=[listMap]&delimiters=|]
		[Hideif [isNull varName=[J_BuildVar field=[word]]]=T]
			[Hideif [ignore]^|[word]|]
				[text]res=F[/text]
			[/Hideif]
		[/Hideif]
	[/Listwords]
	[RETURN][res][/RETURN]
[/Function]

